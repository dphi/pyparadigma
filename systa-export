#!/usr/bin/env python3
import argparse
import binascii
import json
import socket
import struct
import time
from select import select
from threading import Thread
from pprint import pprint


def get_input_bits_str(input, bits):
    return ''.join(input[bit] for bit in bits)


def get_value(input, format, start_byte):
    format = '!' + format if '!' not in format else format
    num_bytes = struct.calcsize(format)
    byte_str = get_input_bits_str(
        input, range(start_byte, start_byte + num_bytes))
    r = struct.unpack(format, binascii.a2b_hex(byte_str))[0]
    return r


def convert_to_array(input, convert_function, step=1,  start=0, stop=None):
    ret = []
    stop = len(input) if stop == None else stop

    for i in range(start, stop, step):
        bits = [i for i in range(i, i+step)]
        val = convert_function(input, bits)
        print(val, bits)
        ret.append(val)

    return ret


def pattern_matches(input, pattern) -> bool:
    for key, value in pattern.items():
        if input[int(key)] != value:
            return False
    return True


def extract_values(input, values) -> dict:
    result = dict()
    for name, params in values.items():
        format = params['format']
        start_byte = params['start_byte']
        val = get_value(input, format, start_byte)

        adjust_fncs = {
            'divby10': lambda x: x/10
        }
        if 'adjust' in params:
            val = adjust_fncs[params['adjust']](val)

        result[name] = val

    return result


def parse_with_configuration(input, configuration):
    result = dict()
    for key, value in configuration.items():
        if not pattern_matches(input, value['pattern']):
            continue

        result.update(extract_values(input, value['values']))

    return result


def parse(input, configuration):
    if len(input) == 0:
        return {}
    
    values = parse_with_configuration(input, configuration)
    return values


def send_monitor_command(sock, host, port):
    #command = systalan_pw + "0a031c0b"
    systalan_pw = '31323334'
    data = bytearray.fromhex(systalan_pw + "0a0114e1")
    sock.sendto(data, (host, port))
    print("sent message (%s): %s" % (len(data), data))



def receive(sock):
    max_data_length = 2048
    timeout = 120  # seconds, must be > 60

    ready = select([sock], [], [], timeout)
    if ready[0]:
        data, addr = sock.recvfrom(max_data_length)
        print("received %s bytes from %s" % (len(data), addr))
        return data

    return b''


def create_socket(): 
    return socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

def communicate(sock, host, port, configuration):
    while True:
        data = receive(sock)
        data = bytearray(data).hex(sep="-").split("-")
        print("received message (%s): %s" % (len(data), data))
        pprint(parse(data, configuration))


def load_configuration(f):
    cfg = json.load(f)
    return cfg


def thread_worker(sock, host, port):
    while True:
        send_monitor_command(sock, host, port)
        time.sleep(60)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--host', type=str, required=True,
                        help='the IP of the Paradigma component')
    parser.add_argument('--port', type=int, default=7260, help='the port')
    parser.add_argument('--config', type=argparse.FileType('r', encoding='utf-8'),
                        default='systa-cfg.json', help='the configuration file')
    args = parser.parse_args()

    configuration = load_configuration(args.config)

    sock = create_socket()
    Thread(target=thread_worker, args=(sock, args.host, args.port)).start()

    communicate(sock, args.host, args.port, configuration)
